snippet #! "#! Perl shebang (#!)" b
#!/usr/bin/env perl

use strict;
use warnings;

use Carp;
use Try::Tiny;
use Data::Dumper;

main();

sub main
{
    ${1}

    return 1;
}
endsnippet

snippet head "POD heading documentation (pod)" b
=pod

=head1 NAME

$1 - ${5:TODO: Short description}

=head1 VERSION

version 1.0

=head1 AUTHOR

`!v g:snips_author` <`!v g:snips_authoremail`>

=head1 SYNOPSIS

  use $1;

=head1 DESCRIPTION

${8:TODO}

=head2 Methods

=over 12

=item C<${9:function}>

${10:function description}

=back

=cut


__END__
endsnippet

snippet headl "POD License (podl)" b
=head1 LICENSE

Copyright (c) `date +%Y` `!v g:snips_author`
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.  2.
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation
are those of the authors and should not be interpreted as representing
official policies, either expressed or implied, of the FreeBSD Project.
endsnippet

snippet subh "POD function documentation" b
=head2 ${1:function}

=over 4

${2:description}

Args: ${3:TODO}
Returns: ${4:TODO}

=back

=cut

endsnippet

snippet sub "Function (sub)" b
sub ${1:function}
{
    my ${2:($self) = @_};

    ${3}
}
endsnippet

snippet ife "Conditional if..else (ife)"
if ( ${1:condition} )
{
    ${2}
}
else
{
    ${3}
}
endsnippet

snippet ifee "Conditional if..elsif..else (ifee)"
if ( ${1:condition} )
{
    ${2}
}
elsif ( ${3:condition} )
{
    ${4}
}
else
{
    ${5}
}
endsnippet

snippet xif "Conditional one-line (xif)"
${1:expression} if ${2:condition};
endsnippet

snippet xfore "Loop one-line (xforeach)"
${1:expression} foreach @${2:array};
endsnippet

snippet xwhile "Loop one-line (xwhile)"
${1:expression} while ${2:condition};
endsnippet

snippet package "New Package (package)"
package ${1:ClassName};

${2:use namespace::autoclean;
use Moose;
use MooseX::StrictConstructor;}${2/.+/\n\n/}${3:extends '${4:ParentClass}';}${3/.+/\n\n/}${5:has}

__PACKAGE__->meta->make_immutable;
1;


endsnippet

snippet role "New Moose Role"
package ${1:ClassName};

use Moose::Role;
use MooseX::StrictConstructor;

${2:attributes}

${3:methods}

1;

=pod

=head1 NAME

$1 - ${4:TODO: Short description};

=head1 VERSION

version 1.0

=head1 SYNOPSIS

  package SomeClass;
  use Moose;

  with '$1';

=head1 DESCRIPTION

${5:TODO}

=cut


__END__
endsnippet

snippet try "Try::Tiny (try)"
try
{
    ${1}
}
catch
{
    ${3}
};
endsnippet

snippet tryf "Try::Tiny with finally (tryf)"
try
{
    ${1}
}
catch
{
    ${3}
}
finally
{
    ${4}
};
endsnippet

snippet cfor "C-style for loop (cfor)"
${1:LABEL}: for ( my $${2:var} = 0; $$2 < ${3:expression}; $$2++ )
{
    ${4}
}
endsnippet

snippet for "foreach loop (for)"
${1:LABEL}: foreach ${2:my $${3:x}} ( @${4:array} )
{
    ${5}
}
endsnippet

snippet if "if"
if ( ${1:condition} )
{
    ${2}
}
endsnippet

snippet slurp "slurp"
my $${1:var} = do { local $/ = undef; open my $fh, '<', ${2:$file}; <$fh> };
endsnippet

snippet while "while"
${1:LABEL}: while ( ${2:condition} )
{
    ${3}
}
endsnippet

snippet has "has"
has '${1:attribute}' => (
    'is'      => "${2:ro}",
    'isa'     => "${3:Str}",
    'lazy'    => 1,
    'default' => ${4:""},
);
endsnippet

snippet immut "Add make_immutable line for Moose"
__PACKAGE__->meta->make_immutable;
endsnippet

snippet died "die Dumper (died)"
use Data::Dumper;
die Dumper ${1:value};
endsnippet

snippet warnd "warn Dumper (warnd)"
use Data::Dumper;
warn Dumper ${1:value};
endsnippet

snippet todo "TODO (todo)"
# TODO (lpetherbridge): $1
endsnippet

snippet testm "New Test::Class::Moose class (tmoose)"
package Test::${1:ClassName};

use Test::Class::Moose;
use Test::Fap::Model;

use $1;

has 'model' => (
    'is'      => "rw",
    'isa'     => "Test::Fap::Model",
    'lazy'    => 1,
    'default' => sub { Test::Fap::Model->new() },
);

sub test_setup
{
    my ($self) = @_;
}

$2

1;
endsnippet

# vim:ft=snippets:
