snippet #! "#! Perl shebang (#!)" b
#!/usr/bin/perl

use strict;
use warnings;

use Carp;
use Try::Tiny;
use Data::Dumper;

main();

sub main {
	${1:# All the logics...}

	return 1;
}
endsnippet

snippet pod "POD heading documentation (pod)" b
=pod

=head1 NAME

$1 - ${5:TODO: Short description}

=head1 VERSION

version 1.0

=head1 AUTHOR

`!v g:snips_author` <`!v g:snips_authoremail`>

=head1 SYNOPSIS

  use $1;

=head1 DESCRIPTION

${8:TODO}

=head2 Methods

=over 12

=item C<${9:function}>

${10:function description}

=back

=cut


__END__
endsnippet

snippet podl "POD License (podl)" b
=head1 LICENSE

Copyright (c) `date +%Y` `!v g:snips_author`
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.  2.
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation
are those of the authors and should not be interpreted as representing
official policies, either expressed or implied, of the FreeBSD Project.
endsnippet

snippet podsub "POD function documentation" b
=head2 ${1:function}

=over 4

${2:description}

Args: ${3:TODO}
Returns: ${4:TODO}

=back

=cut

endsnippet

snippet sub "Function (sub)" b
sub ${1:function}
{
	my ${2:$self = shift};

	${3:# logic all the things!}
}
endsnippet

snippet ife "Conditional if..else (ife)"
if (${1:condition})
{
	${2:# body...}
}
else
{
	${3:# else...}
}
endsnippet

snippet ifee "Conditional if..elsif..else (ifee)"
if (${1:condition})
{
	${2:# body...}
}
elsif (${3:condition})
{
	${4:# elsif...}
}
else
{
	${5:# else...}
}
endsnippet

snippet xunless "Conditional one-line (unless)"
${1:expression} unless ${2:condition};
endsnippet

snippet xif "Conditional one-line (xif)"
${1:expression} if ${2:condition};
endsnippet

snippet xfore "Loop one-line (xforeach)"
${1:expression} foreach @${2:array};
endsnippet

snippet xwhile "Loop one-line (xwhile)"
${1:expression} while ${2:condition};
endsnippet

snippet test "Test" b
#!/usr/bin/env perl

use ${1:ClassName}::Test;

Test::Class->runtests;
endsnippet

snippet testc "Test::Class (testc)" b
package ${1:ClassName}::Test;

use base qw(Test::Class)
use Test::More;

use strict;
use warnings;

${2:sub ${3:setup} : Test${4:(setup)} {
	${5:# logic...}
};}

1;
endsnippet

snippet class "class"
package ${1:ClassName};

${2:use MooseX;}

${3:extends '${4:ParentClass}';}${3/.+/\n\n/}${5:has}

__PACKAGE__->meta->make_immutable;
1;


endsnippet

snippet role "role"
package ${1:ClassName};

use namespace::autoclean;
use Moose::Role;
use MooseX::StrictConstructor;

${2:attributes}

${3:methods}

1;

=pod

=head1 NAME

$1 - ${4:TODO: Short description};

=head1 VERSION

version 1.0

=head1 SYNOPSIS

  package SomeClass;
  use Moose;

  with '$1';

=head1 DESCRIPTION

${5:TODO}

=cut


__END__
endsnippet

snippet try "Try::Tiny (try)"
try
{
	${1:# do something risky...}
}
catch
{
	${3:# handle failure...}
};
endsnippet

snippet tryf "Try::Tiny with finally (tryf)"
try
{
	${1:# do something risky...}
}
catch
{
	${3:# handle failure...}
}
finally
{
	${4:# cleanup...}
};
endsnippet

snippet cfor "C-style for loop (cfor)"
for (my $${1:var} = 0; $$1 < ${2:expression}; $$1++)
{
	${3:# body...}
}
endsnippet

snippet for "foreach loop (for)"
foreach ${1:my $${2:x}} (@${3:array})
{
	${4:# body...}
}
endsnippet

snippet if "if"
if (${1:condition})
{
	${2:# body...}
}
endsnippet

snippet slurp "slurp"
my $${1:var} = do { local $/ = undef; open my $fh, '<', ${2:$file}; <$fh> };
endsnippet

snippet while "while"
while (${1:condition})
{
	${2:# body...}
}
endsnippet

snippet subpod "Subroutine pod documentation (subpod)" b
=head2 ${1:function}

=over 4

${2:description}

Args: ${3:TODO}
Returns: ${4:TODO}

=back

=cut

endsnippet

snippet has "has"
has '${1:attribute}' => (
	'is'      => '${2:ro}',
	'isa'     => '${3:Str}',
	'lazy'    => 1,
	'default' => ${4:''},
${5:	'writer'  => '_$1',}${5/.+/\n/});
endsnippet

snippet immute "immute"
__PACKAGE__->meta->make_immutable;
endsnippet

snippet died "die Dumper (died)"
die Data::Dumper::Dumper ${1:value};
endsnippet

snippet warnd "warn Dumper (warnd)"
warn Data::Dumper::Dumper ${1:value};
endsnippet

# vim:ft=snippets:
