###########################################################################
#														 TextMate Snippets														#
###########################################################################

priority -49

snippet def "#define ..."
#define ${1}
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char **argv)
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif /* end of include guard: $1 */

endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet wh "while loop"
while (${1:/* condition */})
{
	${VISUAL}${0}
}
endsnippet

snippet do "do...while loop (do)"
do {
	${VISUAL}${0}
} while (${1:/* condition */});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */})
{
	${VISUAL}${0}
}
endsnippet

snippet el "else .. (else)"
else {
	${VISUAL}${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */})
{
	${VISUAL}${0}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */})
{
	${2:// ...}
}
else
{
	${3:// ...}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};  // end $1
endsnippet

snippet fun "function" b



/* ${5:TODO(Luke): Description}
   @pre  ${6:Preconditions}
   @post  ${7:Postconditions}
   @param  $3
   @return  ${9:1 if the operation was successful, otherwise 0} */
${1:void} ${2:function_name}(${3:void})
{
	${VISUAL}${0}

	return${4};
}  // end $2
endsnippet

snippet funh "function header" b
/* ${1:TODO(Luke): Description}
   @pre  ${2:Preconditions}
   @post  ${3:Postconditions}
   @param  ${4:Parameters}
   @return  ${5:1 if the operation was successful, otherwise 0} */
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3:void});
endsnippet

snippet head "Header Comment" b
/* -----------------------------------------------------------------------------
   `!v expand('%:p:t')`

   Copyright `date +'%Y'` Lucas Petherbridge
   Author: Lucas Petherbridge <luc6@pdx.edu>
   Course: ${1:CS163}
   Program #${2:1}

   ${3:TODO(Luke): Description}
----------------------------------------------------------------------------- */

${VISUAL}${0}
endsnippet

snippet defg "#define Header Guard" b
#ifndef ${1:`!v toupper(Filename('$1_H', 'UNTITLED_H'))`}
#define $1

${2}

#endif // $1
endsnippet


# vim:ft=snippets:
