# #!/usr/bin/perl
snippet #!
	#!/usr/bin/perl

	=head1 NAME

	`Filename()`

	=head1 SYNOPSIS

	perl `Filename()` [options]

	=head1 DESCRIPTION

	TODO: ${1:description}

	=head1 METHODS

	=over 12

	=item C<main()>

	=back

	=head1 AUTHOR

	`g:snips_author` <`g:snips_authoremail`>

	=cut

	use strict;
	use warnings;

	use Carp;
	use Data::Dumper;

	sub main {
		my $subname = "main";

		${2}

		return 1;
	}

	main();
snippet license
	=head1 LICENSE

	Copyright (c) `system("date +%Y")` `g:snips_author`
	All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are
	met:

	1. Redistributions of source code must retain the above copyright
	notice, this list of conditions and the following disclaimer.  2.
	Redistributions in binary form must reproduce the above copyright
	notice, this list of conditions and the following disclaimer in the
	documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
	IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
	TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
	PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
	OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
	EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
	PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

	The views and conclusions contained in the software and documentation
	are those of the authors and should not be interpreted as representing
	official policies, either expressed or implied, of the FreeBSD Project.

	=cut

# Hash Pointer
snippet .
	 =>
# Function
snippet sub
	=head2 ${1:function}

	=over 4

		${2:description}

		Args: ${3}
		Returns: ${4}

	=back

	=cut

	sub $1 {
		my $subname = "$1";
		${5}

		return 1;
	}
# Conditional
snippet if
	if (${1}) {
	${2}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2}
	}
	else {
		${3}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2}
	}
	elsif (${3}) {
		${4}
	}
	else {
		${5}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1}
	};
	if ($@) {
		${2}
	}
# While Loop
snippet wh
	while (${1}) {
		${2}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# C-style For Loop
snippet cfor
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4}
	}
# For loop one-line
snippet xfor
	${1:expression} for @${2:array};${3}
# Foreach Loop
snippet for
	foreach my $${1:x} (@${2:array}) {
		${3}
	}
# Foreach Loop One-line
snippet fore
	${1:expression} foreach @${2:array};${3}
# Package
snippet cl
	package ${1:ClassName};

	use base qw(${2:ParentClass});

	sub new {
		my $class = shift;
		my $self = bless {}, $class;
		return $self;
	}

	return 1;
# Read File
snippet slurp
	my $${1:var};
	{ local $/ = undef; my ${2:file_handle}; open $2, '<', ${3:file}; $$1 = <$2>; close $2 }${4}
# Method comment
snippet ##
	###
	# ${1:description}
	#
	# @param: ${2:param}
	# @return: ${3:return}
	# @throws: ${4:throws}
	###
# Pod comment
snippet pod
	=head2 ${1:function}

	=over 4

		${2:description}

		Args: ${3}
		Returns: ${4}

	=back

	=cut

# Header comment
snippet #=
	# ==========================================================
	# == ${1:heading}
# sub-header comment
snippet #-
	# ----------------------------------------------------------
	# -- ${1:heading}
snippet log
	use lib '/home/lpetherbridge/lib';
	use Logger;
	Logger::Log(${1});
