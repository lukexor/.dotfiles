*mappings.txt*

==============================================================================
*CONTENTS*                                                         *lp-contents*

    1.  Intro...............................|lp-help|
    2.  Glossary............................|lp-glossary|
    3.  Verbs/Commands......................|lp-verbs|
    4.  Motions/Text Objects................|lp-motions|
    5.  Movement............................|lp-movement|
    6.  File Management.....................|lp-file-management|
    7.  Code Management.....................|lp-code-management|
    8.  Editing.............................|lp-editing|
    9.  Functions...........................|lp-functions|
    10. Folding.............................|lp-folding|
    11. Git.................................|lp-git|
    12. Quick File Editing..................|lp-quick-file-editing|
    13. Sessings............................|lp-sessions|
    14. Spelling............................|lp-spelling|

==============================================================================
1. Intro                                                            *lp-help*

This is a general help/reference file for often used Vim commands and
customizations.

==============================================================================
Glossary                                                         *lp-glossary*

* "a" includes surrounding whitespace
* "inner" does NOT include surrounding whitespace
* "word" includes only characters in iskeyword (most non-symbols are excluded)
* "WORD" includes anything but whitespace
* "sentences" will end in a ".", "!", or "?" followed by space/tab/newline
* "paragraphs" will be surrounded by empty lines above and below 

==============================================================================
Verbs/Commands                                          *lp-verbs* *lp-commands*

All verbs are in the form [count]{cmd}{motion}

.             Repeat last change
>             Indent
["x]gr        "Go Replace" {motion} with contents of register x
["x]grr       "Go Replace " [count] lines with contents of register x
c,C           "Change" C changes until end of line
cp,cP         "CoPy" to system clipboard, cP copies the current line
cs            "Change Surrounding" (e.g. cs"' Change Surrounding " to ')
cv            "CTRL-V" Paste the contents of the clipboard to the next line
d,dd,D        "Delete", dd deletes current line, D deletes until end of line
ds            "Delete Surrounding" (e.g. ds] Delete surrouding [], dst)
ga            "Go Align" Start EasyAlign
gc            "Go Comment" Toggle Comment
gq,gqq        "Go Quick Format" lines, gqq formats the current line
gs            "Go Sort"
gt,gT         "Go Title Case", gT converts the whole line
gu            "Go Lowercase"
gU            "Go Uppercase"
m,mm          "Move" (Yanks and Deletes), mm yanks and deletes current line
o,O           Begin a new line below/above current line and enter INSERT mode           
p,P           "Paste" below/above current line
S             "Surround" Visual Mode
v             "Visually" Select
y,yy,Y        "Yank", yy yanks current line, Y yanks until end of line
ys,yss        "You Surround", yss surrounds current line

==============================================================================
Motions/Text-Objects                                  *lp-motions* *lp-text-obj*

/             Search next match
`             Go to Mark
a),i)         All/Inner Parenthesis
a>,i>         All/Inner Block
aI,iI         All/Inner Current Same Indent Level
a["'],i["']   All/Inner Quotes (Also works for backticks `)
a[wW],i[wW]   All/Inner Word/WORD
a],i]         All/Inner Brackets
a},i}         All/Inner Curly Braces
aa,ia         All/Inner Function Arguments
ae,ie         All/Inner Entire Buffer
ai,ii         All/Inner Current or Greater Indent Level
al,il         All/Inner Current Line
ap,ip         All/Inner Paragraph
ar,ir         All/Inner Ruby Block
as/is         All/Inner Sentence
at,it         All/Inner Tag
az,iz         All/Inner Fold
b,B           Back word/WORD
f,F           Find next character
t,T           'til
;             Repeat last f, F, t, T
,             Repeat last f, F, t, T in opposite direction
w,W           word/WORD

==============================================================================
Movement                                                         *lp-movement*

Most movements can be in the form [count]{cmd}

CTRL-B        "Scroll Back" [count] pages up
CTRL-F        "Scroll Forward" [count] pages down
CTRL-E        "Scroll Extra Lines" Scroll window up [count] lines
CTRL-D        "Scroll Down" [scroll] lines
CTRL-Y        Scroll window down [count] lines
CTRL-U        "Scroll Up" [scroll] lines

0             Move cursor to beginning of line
^             Move cursor to first non-blank character of line
$             Move cursor to end of line
(             Move back [count] sentences
)             Move forward [count] sentences
H             Move cursor to top of window
M             Move cursor to middle of window
L             Move cursor to bottom of window
J             Page down
K             Page up
gg            Top of file
G             Bottom of file

<leader><leader>    EasyMotion move
<tab>,%       Match bracket/parenthesis
[c            Previous Git Hunk
]c            Next Git Hunk
{             Move back [count] paragraphs
}             Move forward [count] paragraphs

<leader>ma    Clear all marks
<leader>mt    Toggle ShowMarks
gm            Add Mark

==============================================================================
File Management                                           *lp-file-management*

:BCommits     Search Commits for current buffer
:BTags        Search Tags for current buffer
:Commits      Search All Commits
:GFiles       Open Git file
:Maps         Search Mappings
:Marks        Search Marks
<leader>b     Search Buffers
CTRL-I        Search Snippets
CTRL-O        Fuzzy open file
<leader>h     Search History
CTRL-T        Search All Tags
<leader>A     switches to the header file corresponding to the current file being edited (or vise versa)
<leader>a     Previous Buffer
<leader>d     Next Buffer
<leader>ih    switches to file under cursor
<leader>ihn   cycles through matches
<leader>is    switches to the alternate file of file under cursor (e.g. on  <foo.h> switches to foo.cpp)
<leader>l     Switch between last two files
<leader>n     New Buffer


==============================================================================
Code Management                                           *lp-code-management*

<leader>m     Make
<leader>t     Run Tests

==============================================================================
Editing                                                           *lp-editing*

<leader>rs    Strip trailing space
<leader>rt    Retab spaces w/ tabs
CTRL-N        Paste Next
CTRL-P        Paste Previous
[count]gcc    Comment out {count} lines
I             Go to Beginning of line and INSERT (first non-blank character)
A             Go to End of line and INSERT
q{register}   Record macro in {register}, press q again to stop
@{register}   Play macro in {register}

==============================================================================
Functions                                                       *lp-functions*

<F1>          Help
<F2>          File Tree
<F3>          Tagbar
<F12>         Map QuickRef

==============================================================================
Folding                                                           *lp-folding*

zo            Open one fold
zO            Open fold recursive
zR            Open all folds
zc            Close one fold
zC            Close fold recursive
zM            Close all folds
zi            Enable/Disable folds

==============================================================================
Git                                                                   *lp-git*

:GBrowse              Open current file in GitHub
:Git [args]           Execute any git command
:Gmove                Git moves and renames buffer
:Gremove              Git removes and deletes buffer
<leader>gm [args]     Merge a branch or tag
<leader>gb            Bring up a git blame panel
<leader>gc            Commits currently staged changes, prompts for commit message
<leader>gd            Compared staged version of file with working
<leader>glg           Open the git log in a split window
<leader>gpl           Update the current branch
<leader>gps           Push the current branch
<leader>gst [args]    Opens Git status in a buffer window
  -                   Add/Reset File
  p                   Add/Reset Patch
<leader>hp            Preview Git hunk
<leader>hs            Stage Git hunk
<leader>hu            Undo Git hunk

==============================================================================
Quick File Editing                                     *lp-quick-file-editing*

<leader>ev    Edit vimrc
<leader>ep    Edit snippets
<leader>sv    Source vimrc

==============================================================================
Sessions                                                         *lp-sessions*

DeleteSession {name}   Delete a vim session
OpenSession {name}     Open a vim session
SaveSession {name}     Save a vim session

==============================================================================
Spelling                                                         *lp-spelling*

<leader>ss    Toggle Spellcheck
]s            Next mispelled word
[s            Previous misspelled word
zg            Add word to dictionary
zw            Remove word from dictionary
z=            List spelling corrections

vim:tw=78:ts=8:ft=help:norl:
